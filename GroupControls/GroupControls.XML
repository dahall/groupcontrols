<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GroupControls</name>
    </assembly>
    <members>
        <member name="T:GroupControls.ButtonListBase`1">
            <summary>Abstract base class for lists of owner-drawn buttons.</summary>
        </member>
        <member name="E:GroupControls.ButtonListBase`1.SubtextForeColorChanged">
            <summary>Occurs when SubtextForeColor changed.</summary>
        </member>
        <member name="E:GroupControls.ButtonListBase`1.SubtextSeparatorHeightChanged">
            <summary>Occurs when SubtextSeparatorHeight changed.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.CheckAlign">
            <summary>Gets or sets the alignment of the check box in relation to the text.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.SubtextFont">
            <summary>Gets or sets the font used to render the subtext of each item.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.SubtextForeColor">
            <summary>Gets or sets the color of an item's subtext.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.SubtextSeparatorHeight">
            <summary>Gets or sets the number of pixels used to separate the text from the subtext within an item.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.Text">
            <summary>Text for the control. This property is not available for this control.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.TextAlign">
            <summary>Gets or sets the alignment of the text in relation to the bounds of the item.</summary>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.FocusedIndex">
            <summary>Gets the index of the focused item.</summary>
            <value>The index of the focused item.</value>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.FocusedItem">
            <summary>Gets or sets the focused item.</summary>
            <value>The focused item.</value>
        </member>
        <member name="P:GroupControls.ButtonListBase`1.TextFormatFlags">
            <summary>Gets the TextFormatFlags based on alignments.</summary>
            <value>The TextFormatFlags.</value>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.EnsureVisible(System.Int32)">
            <summary>Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.</summary>
            <param name="index">The zero-based index of the item to scroll into view.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.MeasureItem(System.Drawing.Graphics,System.Int32,System.Drawing.Size)">
            <summary>Measures the specified item.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="maxSize">Maximum size of the item. Usually only constrains the width.</param>
            <returns>Minimum size for the item.</returns>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.FocusNextItem(GroupControls.ButtonListItem{`0},System.Boolean)">
            <summary>Focuses the next item.</summary>
            <param name="item">The current item.</param>
            <param name="forward">if set to <c>true</c>, moves to the next item, otherwise moves to the previous item.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.GetButtonSize(System.Drawing.Graphics)">
            <summary>Gets the size of the image used to display the button.</summary>
            <param name="g">Current <see cref="T:System.Drawing.Graphics"/> context.</param>
            <returns>The size of the image.</returns>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.GetItemToolTipText(System.Int32)">
            <summary>Gets the specified item's tooltip text.</summary>
            <param name="index">The index of the item.</param>
            <returns>Tooltip text to display. <c>null</c> or <see cref="F:System.String.Empty"/> to display no tooltip.</returns>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.GetNextEnabledItemIndex(System.Int32,System.Boolean)">
            <summary>Gets the index of the next enabled item.</summary>
            <param name="startIndex">The start index.</param>
            <param name="forward">if set to <c>true</c> find subsequent item, prior item if <c>false</c>.</param>
            <returns>Index of next enabled item, or -1 if not found.</returns>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.IsItemEnabled(System.Int32)">
            <summary>Determines whether the specified item is enabled.</summary>
            <param name="index">The item index.</param>
            <returns><c>true</c> if item is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.OnGotFocus(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.OnLostFocus(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.OnRightToLeftChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.OnSubtextForeColorChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:GroupControls.ButtonListBase`1.SubtextForeColorChanged"/> event.</summary>
            <param name="e">An <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.OnSubtextSeparatorHeightChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the <see cref="E:GroupControls.ButtonListBase`1.SubtextSeparatorHeightChanged"/> event.</summary>
            <param name="e">An <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.PaintButton(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Boolean)">
            <summary>Paints the button.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="bounds">The bounds in which to paint the item.</param>
            <param name="newState">Then new state of the button.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.PaintItem(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Boolean)">
            <summary>Paints the specified item.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="bounds">The bounds in which to paint the item.</param>
            <param name="newState">Then new state of the button.</param>
        </member>
        <member name="M:GroupControls.ButtonListBase`1.SetFocused(System.Int32)">
            <summary>Sets the focus to the specified item.</summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="T:GroupControls.ButtonListItem`1">
            <summary>Base button item type.</summary>
        </member>
        <member name="M:GroupControls.ButtonListItem`1.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:GroupControls.ButtonListItem`1"/> class.</summary>
            <param name="text">The text.</param>
            <param name="subtext">The subtext.</param>
            <param name="tooltipText">The tooltip text.</param>
        </member>
        <member name="E:GroupControls.ButtonListItem`1.PropertyChanged">
            <summary>Occurs when a property value has changed.</summary>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.Checked">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.ButtonListItem`1"/> is checked.</summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.Enabled">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.ButtonListItem`1"/> is enabled.</summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.Subtext">
            <summary>Gets or sets the subtext.</summary>
            <value>The subtext.</value>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.Tag">
            <summary>Gets or sets the tag.</summary>
            <value>The tag.</value>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.Text">
            <summary>Gets or sets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.ToolTipText">
            <summary>Gets or sets the tool tip text.</summary>
            <value>The tool tip text.</value>
        </member>
        <member name="P:GroupControls.ButtonListItem`1.Focused">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.ButtonListItem`1"/> is focused.</summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GroupControls.ButtonListItem`1.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:GroupControls.ButtonListItem`1.Equals(GroupControls.ButtonListItem{`0})">
            <summary>Determines whether the specified <see cref="T:GroupControls.ButtonListItem`1"/> is equal to the current <see cref="T:GroupControls.ButtonListItem`1"/>.</summary>
            <param name="other">The <see cref="T:GroupControls.ButtonListItem`1"/> to compare with the current <see cref="T:GroupControls.ButtonListItem`1"/>.</param>
            <returns>
            true if the specified <see cref="T:GroupControls.ButtonListItem`1"/> is equal to the current <see cref="T:GroupControls.ButtonListItem`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GroupControls.ButtonListItem`1.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GroupControls.ButtonListItem`1.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:GroupControls.ButtonListItem`1.OnNotifyPropertyChanged(System.String)">
            <summary>Called when a property value has changed.</summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:GroupControls.CheckBoxList">
            <summary>Represents a windows control that displays a list of checkbox items with optional subtext entries.</summary>
        </member>
        <member name="M:GroupControls.CheckBoxList.#ctor">
            <summary>Creates a new instance of a <see cref="T:GroupControls.CheckBoxList"/>.</summary>
        </member>
        <member name="E:GroupControls.CheckBoxList.ItemCheckStateChanged">
            <summary>Occurs when item check state changed.</summary>
        </member>
        <member name="P:GroupControls.CheckBoxList.Items">
            <summary>Gets the list of <see cref="T:GroupControls.CheckBoxListItem"/> associated with the control.</summary>
        </member>
        <member name="P:GroupControls.CheckBoxList.SelectedIndicies">
            <summary>Gets or sets the selected items in the list based on bits. Limited to lists of 64 items or less.</summary>
        </member>
        <member name="P:GroupControls.CheckBoxList.ThreeState">
            <summary>Gets or sets whether the checkboxes will use three states rather than two.</summary>
        </member>
        <member name="P:GroupControls.CheckBoxList.BaseItems">
            <summary>Gets the base list of items.</summary>
            <value>Any list supporting and <see cref="T:System.Collections.IList"/> interface.</value>
        </member>
        <member name="P:GroupControls.CheckBoxList.BackgroundRenderer">
            <summary>Gets the background renderer for this type of control.</summary>
            <value>The background renderer.</value>
        </member>
        <member name="M:GroupControls.CheckBoxList.GetButtonSize(System.Drawing.Graphics)">
            <summary>Gets the size of the image used to display the button.</summary>
            <param name="g">Current <see cref="T:System.Drawing.Graphics"/> context.</param>
            <returns>The size of the image.</returns>
        </member>
        <member name="M:GroupControls.CheckBoxList.ListHasMnemonic(System.Char)">
            <summary>Determines whether this list has the specified mnemonic in its members.</summary>
            <param name="charCode">The mnemonic character.</param>
            <returns><c>true</c> if list has the mnemonic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.CheckBoxList.OnItemCheckStateChanged(GroupControls.CheckBoxListItemCheckStateChangedEventArgs)">
            <summary>Called when item check state changed.</summary>
            <param name="e">The <see cref="T:GroupControls.CheckBoxListItemCheckStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GroupControls.CheckBoxList.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.CheckBoxList.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.CheckBoxList.PaintButton(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Boolean)">
            <summary>Paints the button.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="bounds">The bounds in which to paint the item.</param>
            <param name="newState"></param>
        </member>
        <member name="M:GroupControls.CheckBoxList.ProcessKey(System.Windows.Forms.KeyEventArgs)">
            <summary>Processes a keyboard event.</summary>
            <param name="ke">The <see cref="T:System.Windows.Forms.KeyEventArgs"/> associated with the key press.</param>
            <returns><c>true</c> if the key was processed by the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.CheckBoxList.ToggleItem(System.Int32)">
            <summary>Flips the indicated items check state.</summary>
            <param name="itemIndex">Index of the item to toggle.</param>
        </member>
        <member name="T:GroupControls.CheckBoxListItem">
            <summary>An item associated with a <see cref="T:GroupControls.CheckBoxList"/>.</summary>
        </member>
        <member name="M:GroupControls.CheckBoxListItem.#ctor">
            <summary>Creates a new instance of a <c>CheckBoxListItem</c>.</summary>
        </member>
        <member name="M:GroupControls.CheckBoxListItem.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new instance of a <c>CheckBoxListItem</c>.</summary>
            <param name="text">Text displayed next to checkbox.</param>
            <param name="subtext">Subtext displayed under text.</param>
            <param name="tooltipText">Tooltip displayed for the item.</param>
        </member>
        <member name="E:GroupControls.CheckBoxListItem.CheckStateChanged">
            <summary>Occurs when the CheckState value changes.</summary>
        </member>
        <member name="P:GroupControls.CheckBoxListItem.Checked">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.CheckBoxListItem"/> is checked.</summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.CheckBoxListItem.CheckState">
            <summary>Gets or sets the state of the checkbox.</summary>
        </member>
        <member name="P:GroupControls.CheckBoxListItem.Enabled">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.CheckBoxListItem"/> is enabled.</summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GroupControls.CheckBoxListItem.Equals(GroupControls.CheckBoxListItem)">
            <summary>Determines whether the specified <see cref="T:GroupControls.CheckBoxListItem"/> is equal to the current <see cref="T:GroupControls.CheckBoxListItem"/>.</summary>
            <param name="other">The <see cref="T:GroupControls.CheckBoxListItem"/> to compare with the current <see cref="T:GroupControls.CheckBoxListItem"/>.</param>
            <returns>
            true if the specified <see cref="T:GroupControls.CheckBoxListItem"/> is equal to the current <see cref="T:GroupControls.CheckBoxListItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GroupControls.CheckBoxListItem.OnCheckStateChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:CheckStateChanged"/> event.</summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:GroupControls.CheckBoxListItemCheckStateChangedEventArgs">
            <summary>Provides data for the <see cref="E:CheckBoxList.ItemCheckStateChanged"/> event of the <see cref="T:GroupControls.CheckBoxList"/> control.</summary>
        </member>
        <member name="M:GroupControls.CheckBoxListItemCheckStateChangedEventArgs.#ctor(GroupControls.CheckBoxListItem,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:GroupControls.CheckBoxListItemCheckStateChangedEventArgs"/> class.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:GroupControls.CheckBoxListItemCheckStateChangedEventArgs.Item">
            <summary>Gets the <see cref="T:GroupControls.CheckBoxListItem"/> whose checked state is changing.</summary>
            <value>The <see cref="T:GroupControls.CheckBoxListItem"/> whose checked state is changing.</value>
        </member>
        <member name="P:GroupControls.CheckBoxListItemCheckStateChangedEventArgs.ItemIndex">
            <summary>Gets the index of the item.</summary>
            <value>The index of the item.</value>
        </member>
        <member name="T:GroupControls.CheckBoxListItemCollection">
            <summary></summary>
        </member>
        <member name="M:GroupControls.CheckBoxListItemCollection.Add(System.String,System.String)">
            <summary>Adds a new item to the collection.</summary>
            <param name="text">Item text.</param>
            <param name="subtext">Item subtext.</param>
        </member>
        <member name="M:GroupControls.CheckBoxListItemCollection.Add(System.String[])">
            <summary>Adds the specified text values to the collection.</summary>
            <param name="textValues">The text value pairs representing matching text and subtext.</param>
            <exception cref="T:System.ArgumentException">
            List of values must contain matching text/subtext entries for an even count of strings.;textValues
            </exception>
        </member>
        <member name="M:GroupControls.CheckBoxListItemCollection.OnItemAdded(System.Int32,GroupControls.CheckBoxListItem)">
            <summary>Called when an item is added.</summary>
            <param name="index">The item index.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="M:GroupControls.ColumnLayoutEngine.GetPreferredSize(GroupControls.ControlListBase,System.Drawing.Size)">
            <summary>Retrieves the size of a rectangular area into which a control can be fitted.</summary>
            <param name="container">The container.</param>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:GroupControls.ColumnLayoutEngine.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>Layouts the specified container.</summary>
            <param name="container">The container.</param>
            <param name="layoutEventArgs">The <see cref="T:System.Windows.Forms.LayoutEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:GroupControls.RepeatDirection">
            <summary>Specifies the direction in which items of a list control are displayed.</summary>
        </member>
        <member name="F:GroupControls.RepeatDirection.Vertical">
            <summary>
            Items of a list are displayed vertically in columns from top to bottom, and then left to right, until all items are rendered.
            </summary>
        </member>
        <member name="F:GroupControls.RepeatDirection.Horizontal">
            <summary>Items of a list are displayed horizontally in rows from left to right, then top to bottom, until all items are rendered.</summary>
        </member>
        <member name="T:GroupControls.ControlListBase">
            <summary>Abstract class that handles the display of numerous control items.</summary>
        </member>
        <member name="M:GroupControls.ControlListBase.#ctor">
            <summary>Initializes a new instance of the <see cref="T:GroupControls.ControlListBase"/> class.</summary>
        </member>
        <member name="T:GroupControls.ControlListBase.PaintBackgroundMethod">
            <summary>Method that will draw a control's background in a specified area.</summary>
            <param name="g">The Graphics object used to draw.</param>
            <param name="bounds">The bounds.</param>
            <param name="childControl">The child control.</param>
        </member>
        <member name="P:GroupControls.ControlListBase.AutoScroll">
            <summary>
            Gets or sets a value indicating whether the container enables the user to scroll to any controls placed outside of its visible boundaries.
            </summary>
            <returns>true if the container enables auto-scrolling; otherwise, false. The default value is false.</returns>
        </member>
        <member name="P:GroupControls.ControlListBase.AutoSize">
            <summary>Gets or sets a value that determines whether the control resizes based on its content.</summary>
            <value>true if enabled; otherwise, false.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.BorderStyle">
            <summary>Gets or sets the border style of the list control.</summary>
            <value>One of the <see cref="P:GroupControls.ControlListBase.BorderStyle"/> values. The default is <c>BorderStyle:None</c>.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.ItemSpacing">
            <summary>Gets the spacing in between items.</summary>
            <value>The <see cref="T:System.Drawing.Size"/> representing the horizontal and vertical spacing between items.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.LayoutEngine">
            <summary>Gets or sets the layout engine.</summary>
            <value>The layout engine.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.RepeatColumns">
            <summary>Gets or sets the number of columns to display in the control.</summary>
            <value>The repeat columns.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.RepeatDirection">
            <summary>Gets or sets the direction in which the items within the group are displayed.</summary>
            <value>One of the <see cref="P:GroupControls.ControlListBase.RepeatDirection"/> values. The default is <c>Vertical</c>.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.ShowItemToolTip">
            <summary>Gets or sets a value that determines whether a tooltip is displayed for each item in the list.</summary>
            <value><c>true</c> if tooltips are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.SpaceEvenly">
            <summary>
            Gets or sets a value that determines if the items are spaced evenly based on the height of the largest item or if they are spaced
            according to the height of each item.
            </summary>
            <value><c>true</c> if items are spaced evenly; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.Text">
            <summary>Gets or sets the text associated with this control.</summary>
            <returns>The text associated with this control.</returns>
        </member>
        <member name="P:GroupControls.ControlListBase.VariableColumnWidths">
            <summary>
            Gets or sets a value that determines if the columns are allowed to be a variable width or if they are to be all the same width.
            </summary>
            <value><c>true</c> if the columns can be a variable width; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.BaseItems">
            <summary>Gets the base list of items.</summary>
            <value>Any list supporting and <see cref="T:System.Collections.IList"/> interface.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.BackgroundRenderer">
            <summary>Gets the background renderer for this type of control.</summary>
            <value>The background renderer.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.CreateParams">
            <summary>Gets the required creation parameters when the control handle is created.</summary>
            <returns>
            A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters when the handle to the control
            is created.
            </returns>
        </member>
        <member name="P:GroupControls.ControlListBase.HoverItem">
            <summary>Gets the hover item's index.</summary>
            <value>The hover item index.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.HoverItemOld">
            <summary>Gets the previous hover item.</summary>
            <value>The previous hover item.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.PressingItem">
            <summary>Gets or sets the index of the item being pressing.</summary>
            <value>The pressed item index.</value>
        </member>
        <member name="P:GroupControls.ControlListBase.PressingItemOld">
            <summary>Gets the previous pressing item.</summary>
            <value>The previous pressing item.</value>
        </member>
        <member name="M:GroupControls.ControlListBase.GetItemRect(System.Int32)">
            <summary>Retrieves the bounding rectangle for a specific item within the list control.</summary>
            <param name="index">The zero-based index of the item whose bounding rectangle you want to return.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that represents the bounding rectangle of the specified item.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.GetPreferredSize(System.Drawing.Size)">
            <summary>Retrieves the size of a rectangular area into which a control can be fitted.</summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.MeasureItem(System.Drawing.Graphics,System.Int32,System.Drawing.Size)">
            <summary>Measures the specified item.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="maxSize">Maximum size of the item. Usually only constrains the width.</param>
            <returns>Minimum size for the item.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:GroupControls.ControlListBase.GetItemAtLocation(System.Drawing.Point)">
            <summary>Gets the item at location within the control.</summary>
            <param name="pt">The location.</param>
            <returns></returns>
        </member>
        <member name="M:GroupControls.ControlListBase.GetItemToolTipText(System.Int32)">
            <summary>Gets the specified item's tooltip text.</summary>
            <param name="index">The index of the item.</param>
            <returns>Tooltip text to display. <c>null</c> or <see cref="F:System.String.Empty"/> to display no tooltip.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.InvalidateItem(System.Int32)">
            <summary>Invalidates the specified item.</summary>
            <param name="index">The item index.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.IsItemEnabled(System.Int32)">
            <summary>Determines whether the specified item is enabled.</summary>
            <param name="index">The item index.</param>
            <returns><c>true</c> if item is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.ListHasMnemonic(System.Char)">
            <summary>Determines whether this list has the specified mnemonic in its members.</summary>
            <param name="charCode">The mnemonic character.</param>
            <returns><c>true</c> if list has the mnemonic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.OffsetForScroll(System.Drawing.Point)">
            <summary>Offsets the client point for scrolling.</summary>
            <returns>Offset point</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.OffsetForScroll(System.Drawing.Rectangle)">
            <summary>Offsets the client rectangle for scrolling.</summary>
            <returns>Offset rectangle</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnMouseEnter(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnMouseLeave(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnPaddingChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:PaddingChanged"/> event.</summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.</summary>
            <param name="pe">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.ScrollableControl.Scroll"/> event.</summary>
            <param name="se">A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.OnStyleChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.StyleChanged"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.ControlListBase.PaintItem(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Boolean)">
            <summary>Paints the specified item.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="bounds">The bounds in which to paint the item.</param>
            <param name="newState">if set to <c>true</c> [new state].</param>
        </member>
        <member name="M:GroupControls.ControlListBase.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>Processes a dialog key.</summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values that represents the key to process.</param>
            <returns><c>true</c> if the key was processed by the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.ProcessKey(System.Windows.Forms.KeyEventArgs)">
            <summary>Processes a keyboard event.</summary>
            <param name="ke">The <see cref="T:System.Windows.Forms.KeyEventArgs"/> associated with the key press.</param>
            <returns><c>true</c> if the key was processed by the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>Previews a keyboard message.</summary>
            <param name="m">A <see cref="T:System.Windows.Forms.Message"/>, passed by reference, that represents the window message to process.</param>
            <returns><c>true</c> if the key was processed by the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.ProcessMnemonic(System.Char)">
            <summary>Processes a mnemonic.</summary>
            <param name="charCode">The character code.</param>
            <returns><c>true</c> if the mnemonic was processed by the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.ControlListBase.ResetListLayout(System.String)">
            <summary>Resets the list's layout.</summary>
            <param name="propertyName">Name of the property forcing the layout.</param>
        </member>
        <member name="T:GroupControls.Design.DesignerLayoutCodeDomSerializer">
            <summary>
            Specialized serializer for a <see cref="T:System.Windows.Forms.Control"/> that ensures that <c>SuspendLayout()</c> and
            <c>ResumeLayout()</c> are called in the designer.
            </summary>
        </member>
        <member name="M:GroupControls.Design.DesignerLayoutCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>Serializes the specified object into a CodeDOM object.</summary>
            <param name="manager">The serialization manager to use during serialization.</param>
            <param name="value">The object to serialize.</param>
            <returns>A CodeDOM object representing the object that has been serialized.</returns>
        </member>
        <member name="T:GroupControls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GroupControls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GroupControls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:GroupControls.RadioButtonList">
            <summary>Represents a windows control that displays a list of radio button items with optional subtext entries.</summary>
        </member>
        <member name="M:GroupControls.RadioButtonList.#ctor">
            <summary>Creates a new instance of a <see cref="T:GroupControls.RadioButtonList"/>.</summary>
        </member>
        <member name="E:GroupControls.RadioButtonList.SelectedIndexChanged">
            <summary>Occurs when the selected index has changed.</summary>
        </member>
        <member name="P:GroupControls.RadioButtonList.Items">
            <summary>Gets the list of <see cref="T:GroupControls.RadioButtonListItem"/> associated with the control.</summary>
        </member>
        <member name="P:GroupControls.RadioButtonList.SelectedIndex">
            <summary>Gets or sets the index specifying the currently selected item.</summary>
        </member>
        <member name="P:GroupControls.RadioButtonList.SelectedItem">
            <summary>Gets or sets currently selected item in the list.</summary>
        </member>
        <member name="P:GroupControls.RadioButtonList.BaseItems">
            <summary>Gets the base list of items.</summary>
            <value>Any list supporting and <see cref="T:System.Collections.IList"/> interface.</value>
        </member>
        <member name="P:GroupControls.RadioButtonList.BackgroundRenderer">
            <summary>Gets the background renderer for this type of control.</summary>
            <value>The background renderer.</value>
        </member>
        <member name="M:GroupControls.RadioButtonList.GetButtonSize(System.Drawing.Graphics)">
            <summary>Gets the size of the image used to display the button.</summary>
            <param name="g">Current <see cref="T:System.Drawing.Graphics"/> context.</param>
            <returns>The size of the image.</returns>
        </member>
        <member name="M:GroupControls.RadioButtonList.ListHasMnemonic(System.Char)">
            <summary>Determines whether this list has the specified mnemonic in its members.</summary>
            <param name="charCode">The mnemonic character.</param>
            <returns><c>true</c> if list has the mnemonic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.RadioButtonList.OnGotFocus(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.RadioButtonList.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.RadioButtonList.OnLostFocus(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.RadioButtonList.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick"/> event.</summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:GroupControls.RadioButtonList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:SelectedIndexChanged"/> event.</summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GroupControls.RadioButtonList.PaintButton(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Boolean)">
            <summary>Paints the button.</summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> reference.</param>
            <param name="index">The index of the item.</param>
            <param name="bounds">The bounds in which to paint the item.</param>
            <param name="newState"></param>
        </member>
        <member name="M:GroupControls.RadioButtonList.ProcessKey(System.Windows.Forms.KeyEventArgs)">
            <summary>Processes a keyboard event.</summary>
            <param name="ke">The <see cref="T:System.Windows.Forms.KeyEventArgs"/> associated with the key press.</param>
            <returns><c>true</c> if the key was processed by the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GroupControls.RadioButtonList.ResetListLayout(System.String)">
            <summary>Resets the list's layout.</summary>
        </member>
        <member name="T:GroupControls.RadioButtonListItem">
            <summary>An item associated with a <see cref="T:GroupControls.RadioButtonList"/>.</summary>
        </member>
        <member name="M:GroupControls.RadioButtonListItem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:GroupControls.RadioButtonListItem"/> class.</summary>
        </member>
        <member name="M:GroupControls.RadioButtonListItem.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:GroupControls.RadioButtonListItem"/> class.</summary>
            <param name="text">Text displayed next to radio button.</param>
            <param name="subtext">Subtext displayed under text.</param>
            <param name="tooltipText">Tooltip displayed for the item.</param>
        </member>
        <member name="P:GroupControls.RadioButtonListItem.Checked">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.RadioButtonListItem"/> is checked.</summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GroupControls.RadioButtonListItem.Enabled">
            <summary>Gets or sets a value indicating whether this <see cref="T:GroupControls.RadioButtonListItem"/> is enabled.</summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:GroupControls.RadioButtonListItemCollection">
            <summary>Collection of <see cref="T:GroupControls.RadioButtonListItem"/> items.</summary>
        </member>
        <member name="M:GroupControls.RadioButtonListItemCollection.Add(System.String,System.String)">
            <summary>Adds a new item to the collection.</summary>
            <param name="text">Item text.</param>
            <param name="subtext">Item subtext.</param>
        </member>
        <member name="M:GroupControls.RadioButtonListItemCollection.Add(System.String[])">
            <summary>Adds the specified text values to the collection.</summary>
            <param name="textValues">The text value pairs representing matching text and subtext.</param>
            <exception cref="T:System.ArgumentException">
            List of values must contain matching text/subtext entries for an even count of strings.;textValues
            </exception>
        </member>
        <member name="M:GroupControls.RadioButtonListItemCollection.OnItemAdded(System.Int32,GroupControls.RadioButtonListItem)">
            <summary>Called when an item is added.</summary>
            <param name="index">The item index.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="T:System.Collections.Generic.EventedList`1">
            <summary>A generic list that provides event for changes to the list.</summary>
            <typeparam name="T">Type for the list.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1"/> class.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1"/> class.</summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1"/> class.</summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.Capacity">
            <summary>Gets or sets the capacity.</summary>
            <value>The capacity.</value>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.System#Collections#IList#IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.System#Collections#IList#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Object"/> at the specified index.</summary>
            <value></value>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies to.</summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Add(System.Object)">
            <summary>Adds the specified item.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether [contains] [the specified item].</summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>Indexes the of.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts the specified index.</summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Remove(System.Object)">
            <summary>Removes the specified item.</summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Contains(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see
            cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see
            cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or- <paramref name="arrayIndex"/> is equal to or greater than the length of
            <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available
            space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <c>T</c> cannot be cast
            automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.IndexOf(`0)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method
            also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="E:System.Collections.Generic.EventedList`1.ItemAdded">
            <summary>Occurs when an item has been added.</summary>
        </member>
        <member name="E:System.Collections.Generic.EventedList`1.ItemChanged">
            <summary>Occurs when an item has changed.</summary>
        </member>
        <member name="E:System.Collections.Generic.EventedList`1.ItemDeleted">
            <summary>Occurs when an item has been deleted.</summary>
        </member>
        <member name="E:System.Collections.Generic.EventedList`1.ItemPropertyChanged">
            <summary>Occurs when an item's property value has been changed.</summary>
        </member>
        <member name="E:System.Collections.Generic.EventedList`1.Reset">
            <summary>Occurs when the list has been reset.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds the range of items to the list.</summary>
            <param name="collection">The collection of items to add.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.AddRange(`0[])">
            <summary>Adds the range of items to the list.</summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.AsReadOnly">
            <summary>Determines if the collection is read-only.</summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.EventedList`1"/> for an element using the default comparer and returns the zero-based
            index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:System.Collections.Generic.EventedList`1"/>, if item is found; otherwise, a negative number that is
            the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise
            complement of <see cref="P:System.Collections.Generic.EventedList`1.Count"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.EventedList`1"/> for an element using the specified comparer and returns the zero-based
            index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:System.Collections.Generic.EventedList`1"/>, if item is found; otherwise, a negative number that is
            the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise
            complement of <see cref="P:System.Collections.Generic.EventedList`1.Count"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.EventedList`1"/> for an element using the specified comparer and returns
            the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:System.Collections.Generic.EventedList`1"/>, if item is found; otherwise, a negative number that is
            the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise
            complement of <see cref="P:System.Collections.Generic.EventedList`1.Count"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>Converts all.</summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>Copies to.</summary>
            <param name="index">The index.</param>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Exists(System.Predicate{`0})">
            <summary>Determines if an item matches the specified predicate.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Find(System.Predicate{`0})">
            <summary>Finds the specified match.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindAll(System.Predicate{`0})">
            <summary>Finds all.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindIndex(System.Predicate{`0})">
            <summary>Finds the index.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>Finds the index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Finds the index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindLast(System.Predicate{`0})">
            <summary>Finds the last.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindLastIndex(System.Predicate{`0})">
            <summary>Finds the last index.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>Finds the last index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Finds the last index.</summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.ForEach(System.Action{`0})">
            <summary>Performs an action on each item in the collection.</summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.GetEnumerator">
            <summary>Gets the enumerator.</summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.GetRange(System.Int32,System.Int32)">
            <summary>Gets the range of items and returns then in another list.</summary>
            <param name="index">The starting index.</param>
            <param name="count">The count of items to place in the list.</param>
            <returns>An <see cref="T:System.Collections.Generic.EventedList`1"/> with the requested items.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.IndexOf(`0,System.Int32)">
            <summary>Indexes the of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>Indexes the of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Inserts the range.</summary>
            <param name="index">The index.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.LastIndexOf(`0)">
            <summary>Lasts the index of.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.LastIndexOf(`0,System.Int32)">
            <summary>Lasts the index of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>Lasts the index of.</summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes all.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>Removes the range.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Reverse">
            <summary>Reverses this instance.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Reverse(System.Int32,System.Int32)">
            <summary>Reverses the specified index.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Sort">
            <summary>Sorts this instance.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified comparer.</summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the specified index.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.ToArray">
            <summary>Toes the array.</summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.TrimExcess">
            <summary>Trims the excess.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.TrueForAll(System.Predicate{`0})">
            <summary>Trues for all.</summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.OnItemAdded(System.Int32,`0)">
            <summary>Called when [insert].</summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.OnItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Called when [item property changed].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.OnItemChanged(System.Int32,`0,`0)">
            <summary>Called when [set].</summary>
            <param name="index">The index.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.OnItemDeleted(System.Int32,`0)">
            <summary>Called when [remove].</summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.OnReset">
            <summary>Called when [clear].</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.IsCompatibleObject(System.Object)">
            <summary>Determines whether [is compatible object] [the specified value].</summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is compatible object] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.VerifyValueType(System.Object)">
            <summary>Verifies the type of the value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.CheckIndex(System.Int32,System.String)">
            <summary>Checks the index to ensure it is valid and in the list.</summary>
            <param name="idx">The index to validate.</param>
            <param name="varName">Name of the variable this is being checked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Called with the index is out of range.</exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.CheckRange(System.Int32,System.Int32)">
            <summary>Checks the range.</summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.EnsureCapacity(System.Int32)">
            <summary>Ensures the capacity.</summary>
            <param name="min">The min.</param>
        </member>
        <member name="T:System.Collections.Generic.EventedList`1.Enumerator">
            <summary>Enumerates over the <see cref="T:System.Collections.Generic.EventedList`1"/>.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Enumerator.#ctor(System.Collections.Generic.EventedList{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.Enumerator"/> struct.</summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.Enumerator.Current">
            <summary>Gets the current.</summary>
            <value>The current.</value>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the current.</summary>
            <value>The current.</value>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Enumerator.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1">
            <summary>An <see cref="T:System.EventArgs"/> structure passed to events generated by an <see cref="T:System.Collections.Generic.EventedList`1"/>.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1"/> class.</summary>
            <param name="type">The type of change.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType,`1,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1"/> class.</summary>
            <param name="type">The type of change.</param>
            <param name="item">The item that has changed.</param>
            <param name="itemIndex">Index of the changed item.</param>
        </member>
        <member name="M:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType,`1,System.Int32,`1)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1"/> class.</summary>
            <param name="type">The type of change.</param>
            <param name="item">The item that has changed.</param>
            <param name="itemIndex">Index of the changed item.</param>
            <param name="oldItem">The old item when an item has changed.</param>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.Item">
            <summary>Gets the item that has changed.</summary>
            <value>The item.</value>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.ItemIndex">
            <summary>Gets the index of the item.</summary>
            <value>The index of the item.</value>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.ListChangedType">
            <summary>Gets the type of change for the list.</summary>
            <value>The type of change for the list.</value>
        </member>
        <member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.OldItem">
            <summary>Gets the item's previous value.</summary>
            <value>The old item.</value>
        </member>
        <member name="T:System.Collections.Generic.SparseArray`1">
            <summary>A sparse array based on a dictionary.</summary>
        </member>
        <member name="F:System.Collections.Generic.SparseArray`1.hashtable">
            <summary>Base hash table</summary>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SparseArray`1"/> class.</summary>
        </member>
        <member name="P:System.Collections.Generic.SparseArray`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection{T}"/> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection{T}"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:System.Collections.Generic.SparseArray`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</returns>
        </member>
        <member name="P:System.Collections.Generic.SparseArray`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The index of the element.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection{T}"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection{T}"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.Contains(`0)">
            <summary>Determines whether the array contains the specified value.</summary>
            <param name="item">The value.</param>
            <returns><c>true</c> if the array contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection{T}"/> to an <see cref="T:System.Array"/>, starting
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see
            cref="T:System.Collections.Generic.ICollection{T}"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or- <paramref name="arrayIndex"/> is equal to or greater than the length of
            <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection{T}"/> is
            greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref
            name="array"/>.-or-Type <c>T</c> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.IndexOf(`0)">
            <summary>Gets the index of the specified item, or returns -1 if item is not in the array.</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList{T}"/> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList{T}"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList{T}"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList{T}"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection{T}"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection{T}"/>;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection{T}"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection{T}"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList{T}"/> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList{T}"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList{T}"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.SparseArray`1.ToArray">
            <summary>Collapses array into new, condensed array. Does not maintain indexes.</summary>
            <returns>An array of <typeparamref name="T"/></returns>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRendererExtension.SetState(System.Windows.Forms.VisualStyles.VisualStyleRenderer,System.Int32)">
            <summary>Sets the state of the <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleRenderer"/>.</summary>
            <param name="rnd">The <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleRenderer"/> instance.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:System.Windows.Forms.VisualStyles.VisualStyleRendererExtension.SetWindowThemeAttribute(System.Windows.Forms.IWin32Window,Vanara.Interop.NativeMethods.WindowThemeNonClientAttributes,System.Boolean)">
            <summary>Sets attributes to control how visual styles are applied to a specified window.</summary>
            <param name="window">The window.</param>
            <param name="attr">The attributes to apply or disable.</param>
            <param name="enable">if set to <c>true</c> enable the attribute, otherwise disable it.</param>
        </member>
        <member name="T:System.EnumFlagIndexer`1">
            <summary>
            Structure to use in place of a enumerated type with the <see cref="T:System.FlagsAttribute"/> set. Allows for indexer access to flags and
            simplifies boolean logic.
            </summary>
            <example>
            Use this structure by replacing an enumerated type field for simpler access. Instead of:
            <code language="C#" title="Old way">
            var fileInfo = new FileInfo(@"C:\MyFile.txt");
            FileAttributes fileAttr = fileInfo.Attributes;
            if ((fileAttr &amp; FileAttributes.Hidden) != FileAttributes.Hidden)
            {
            Console.WriteLine("The file is hidden. Trying to unhide now.");
            fileInfo.Attributes = (fileAttr &amp; ~FileAttributes.Hidden);
            }
            </code>
            Do this instead:
            <code language="C#" title="New way">
            var fileInfo = new FileInfo(@"C:\MyFile.txt");
            EnumFlagIndexer&lt;FileAttributes&gt; fileAttr = fileInfo.Attributes;
            if (fileAttr[FileAttributes.Hidden])
            {
            Console.WriteLine("The file is hidden. Trying to unhide now.");
            fileAttr[FileAttributes.Hidden] = false;
            fileInfo.Attributes = fileAttr;
            }
            </code>
            </example>
            <typeparam name="E">Must be an enumerated type or constructor will fail.</typeparam>
        </member>
        <member name="M:System.EnumFlagIndexer`1.#ctor(`0,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.EnumFlagIndexer`1"/> struct.</summary>
            <param name="initialValue">The initial value. Defaults to <c>default(E)</c>.</param>
            <param name="checkFlagAttr">
            if set to <c>true</c> check for the [Flags] attribute and throw an exception if it is not set for this enumerated type.
            </param>
        </member>
        <member name="P:System.EnumFlagIndexer`1.Item(`0)">
            <summary>Gets or sets the specified flag.</summary>
            <value>A boolean value representing the presence of the specified enumerated flag.</value>
            <param name="flag">A value in the enumerated type to check.</param>
            <returns><c>true</c> if the flag is set; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.op_Implicit(System.EnumFlagIndexer{`0})~`0">
            <summary>Implicitly converts an instance of <see cref="T:System.EnumFlagIndexer`1"/> to the value of enumerated type E.</summary>
            <param name="f">The f.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.op_Implicit(`0)~System.EnumFlagIndexer{`0}">
            <summary>Implicitly converts a value of E to an instance of <see cref="T:System.EnumFlagIndexer`1"/>.</summary>
            <param name="e">The e.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.op_Inequality(System.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator !=.</summary>
            <param name="a">An instance of <see cref="T:System.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="E"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.op_BitwiseAnd(System.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator &amp;.</summary>
            <param name="a">An instance of <see cref="T:System.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="E"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.op_Equality(System.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator ==.</summary>
            <param name="a">An instance of <see cref="T:System.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="E"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.Clear">
            <summary>Clears and sets to <c>default(E)</c>.</summary>
        </member>
        <member name="M:System.EnumFlagIndexer`1.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:System.EnumFlagIndexer`1.Union(`0)">
            <summary>Unions the specified flags.</summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:System.EnumFlagIndexer`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>Unions the specified flags.</summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:System.EnumFlagIndexer`1.op_BitwiseOr(System.EnumFlagIndexer{`0},`0)">
            <summary>Implements the operator |.</summary>
            <param name="a">An instance of <see cref="T:System.EnumFlagIndexer`1"/>.</param>
            <param name="b">An instance of the <typeparamref name="E"/> enumerated type.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.InteropUtil.PtrToStructure``1(System.IntPtr)">
            <summary>Converts an <see cref="T:System.IntPtr"/> to a structure. If pointer has no value, <c>null</c> is returned.</summary>
            <typeparam name="T">Type of the structure.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> that points to allocated memory holding a structure or <see cref="F:System.IntPtr.Zero"/>.</param>
            <returns>The converted structure or <c>null</c>.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.InteropUtil.StructureToPtr``1(System.Nullable{``0},System.IntPtr@,System.Predicate{``0})">
            <summary>
            Converts a structure or null value to an <see cref="T:System.IntPtr"/>. If memory has not been allocated for the <paramref name="ptr"/>,
            it will be via a call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>.
            </summary>
            <typeparam name="T">Type of the structure.</typeparam>
            <param name="value">
            The structure to convert. If this value is <c>null</c>, <paramref name="ptr"/> will be set to <see cref="F:System.IntPtr.Zero"/> and
            memory will be released.
            </param>
            <param name="ptr">The <see cref="T:System.IntPtr"/> that will point to allocated memory holding the structure or <see cref="F:System.IntPtr.Zero"/>.</param>
            <param name="isEmpty">
            An optional predicate check to determine if the structure is non-essential and can be replaced with an empty pointer ( <c>null</c>).
            </param>
        </member>
        <member name="M:System.Runtime.InteropServices.InteropUtil.ToArray``2(System.IntPtr,System.Int32,System.Int32)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <typeparam name="TS">Type of native structure used by the C-style array.</typeparam>
            <typeparam name="T">Output type for the CLI array. <typeparamref name="TS"/> must be able to convert to <typeparamref name="T"/>.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <returns>An array of type <typeparamref name="T"/> containing the converted elements of the native array.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.InteropUtil.ToArray``1(System.IntPtr,System.Int32,System.Int32)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <returns>An array of type <typeparamref name="T"/> containing the elements of the native array.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.InteropUtil.ToIEnum``1(System.IntPtr,System.Int32,System.Int32)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr"/> pointing to the native array.</param>
            <param name="count">The number of items in the native array.</param>
            <param name="prefixBytes">Bytes to skip before reading the array.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> exposing the elements of the native array.</returns>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.BackgroundMode">
            <summary>The background mode used by the <see cref="M:Vanara.Interop.NativeMethods.SetBkMode(Vanara.Interop.NativeMethods.SafeDCHandle,Vanara.Interop.NativeMethods.BackgroundMode)"/> function.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BackgroundMode.ERROR">
            <summary>Indicates that on return, the <see cref="M:Vanara.Interop.NativeMethods.SetBkMode(Vanara.Interop.NativeMethods.SafeDCHandle,Vanara.Interop.NativeMethods.BackgroundMode)"/> has failed.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BackgroundMode.TRANSPARENT">
            <summary>Background remains untouched.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BackgroundMode.OPAQUE">
            <summary>Background is filled with the current background color before the text, hatched brush, or pen is drawn.</summary>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.DCLayout">
            <summary>The DC layout used by the <see cref="M:Vanara.Interop.NativeMethods.SetLayout(Vanara.Interop.NativeMethods.SafeDCHandle,Vanara.Interop.NativeMethods.DCLayout)"/> function.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DCLayout.GDI_ERROR">
            <summary>Indicates that on return, the <see cref="M:Vanara.Interop.NativeMethods.SetLayout(Vanara.Interop.NativeMethods.SafeDCHandle,Vanara.Interop.NativeMethods.DCLayout)"/> has failed.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DCLayout.LAYOUT_RTL">
            <summary>Sets the default horizontal layout to be right to left.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DCLayout.LAYOUT_BTT">
            <summary>Sets the default horizontal layout to be bottom to top.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DCLayout.LAYOUT_VBH">
            <summary>Sets the default horizontal layout to be vertical before horizontal.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DCLayout.LAYOUT_BITMAPORIENTATIONPRESERVED">
            <summary>Disables any reflection during BitBlt and StretchBlt operations.</summary>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.RasterOperationMode">
            <summary>
            Defines how the color data for the source rectangle is to be combined with the color data for the destination rectangle to
            achieve the final color when using the <see cref="M:Vanara.Interop.NativeMethods.BitBlt(Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,Vanara.Interop.NativeMethods.RasterOperationMode)"/> function.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.SRCCOPY">
            <summary>Copies the source rectangle directly to the destination rectangle.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.SRCPAINT">
            <summary>Combines the colors of the source and destination rectangles by using the Boolean OR operator.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.SRCAND">
            <summary>Combines the colors of the source and destination rectangles by using the Boolean AND operator.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.SRCINVERT">
            <summary>Combines the colors of the source and destination rectangles by using the Boolean XOR operator.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.SRCERASE">
            <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.NOTSRCCOPY">
            <summary></summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.NOTSRCERASE">
            <summary>Copies the inverted source rectangle to the destination.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.MERGECOPY">
            <summary>
            Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.MERGEPAINT">
            <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.PATCOPY">
            <summary>Copies the brush currently selected in hdcDest, into the destination bitmap.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.PATPAINT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the
            Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the
            Boolean OR operator.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.PATINVERT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the
            Boolean XOR operator.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.DSTINVERT">
            <summary>Inverts the destination rectangle.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.BLACKNESS">
            <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the
            default physical palette.)
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.WHITENESS">
            <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the
            default physical palette.)
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.NOMIRRORBITMAP">
            <summary>Prevents the bitmap from being mirrored.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.RasterOperationMode.CAPTUREBLT">
            <summary>
            Includes any windows that are layered on top of your window in the resulting image.By default, the image only contains your
            window.Note that this generally cannot be used for printing device contexts.
            </summary>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.AlphaBlend(Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.Interop.NativeMethods.BLENDFUNCTION)">
            <summary>The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels.</summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="nXOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nYOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nWidthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="nHeightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="nXOriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="nYOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="nWidthSrc">The width, in logical units, of the source rectangle.</param>
            <param name="nHeightSrc">The height, in logical units, of the source rectangle.</param>
            <param name="blendFunction">
            The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap,
            and format information for the source bitmap. The source and destination blend functions are currently limited to AC_SRC_OVER.
            </param>
            <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.</returns>
            <remarks>
            If the source rectangle and destination rectangle are not the same size, the source bitmap is stretched to match the destination
            rectangle. If the SetStretchBltMode function is used, the iStretchMode value is automatically converted to COLORONCOLOR for this
            function (that is, BLACKONWHITE, WHITEONBLACK, and HALFTONE are changed to COLORONCOLOR).
            <para>
            The destination coordinates are transformed by using the transformation currently specified for the destination device context.
            The source coordinates are transformed by using the transformation currently specified for the source device context.
            </para>
            <para>An error occurs (and the function returns FALSE) if the source device context identifies an enhanced metafile device context.</para>
            <para>
            If destination and source bitmaps do not have the same color format, AlphaBlend converts the source bitmap to match the
            destination bitmap.
            </para>
            <para>
            AlphaBlend does not support mirroring. If either the width or height of the source or destination is negative, this call will fail.
            </para>
            <para>
            When rendering to a printer, first call GetDeviceCaps with SHADEBLENDCAPS to determine if the printer supports blending with
            AlphaBlend. Note that, for a display DC, all blending operations are supported and these flags represent whether the operations
            are accelerated.
            </para>
            <para>
            If the source and destination are the same surface that is, they are both the screen or the same memory bitmap and the source and
            destination rectangles overlap, an error occurs and the function returns FALSE.
            </para>
            <para>
            The source rectangle must lie completely within the source surface, otherwise an error occurs and the function returns FALSE.
            </para>
            <para>AlphaBlend fails if the width or height of the source or destination is negative.</para>
            <para>
            The SourceConstantAlpha member of BLENDFUNCTION specifies an alpha transparency value to be used on the entire source bitmap. The
            SourceConstantAlpha value is combined with any per-pixel alpha values. If SourceConstantAlpha is 0, it is assumed that the image
            is transparent. Set the SourceConstantAlpha value to 255 (which indicates that the image is opaque) when you only want to use
            per-pixel alpha values.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.BitBlt(Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,Vanara.Interop.NativeMethods.RasterOperationMode)">
            <summary>
            The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified
            source device context into a destination device context.
            </summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="nXDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nYDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nWidth">The width, in logical units, of the destination rectangle.</param>
            <param name="nHeight">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="nXSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="nYSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="dwRop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for
            the destination rectangle to achieve the final color.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            BitBlt only does clipping on the destination DC.
            <para>
            If a rotation or shear transformation is in effect in the source device context, BitBlt returns an error. If other
            transformations exist in the source device context (and a matching transformation is not in effect in the destination device
            context), the rectangle in the destination device context is stretched, compressed, or rotated, as necessary.
            </para>
            <para>
            If the color formats of the source and destination device contexts do not match, the BitBlt function converts the source color
            format to match the destination format.
            </para>
            <para>
            When an enhanced metafile is being recorded, an error occurs if the source device context identifies an enhanced-metafile device context.
            </para>
            <para>
            Not all devices support the BitBlt function. For more information, see the RC_BITBLT raster capability entry in the GetDeviceCaps
            function as well as the following functions: MaskBlt, PlgBlt, and StretchBlt.
            </para>
            <para>
            BitBlt returns an error if the source and destination device contexts represent different devices. To transfer data between DCs
            for different devices, convert the memory bitmap to a DIB by calling GetDIBits. To display the DIB to the second device, call
            SetDIBits or StretchDIBits.
            </para>
            <para>ICM: No color management is performed when blits occur.</para>
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.CreateCompatibleDC(System.IntPtr)">
            <summary>The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.</summary>
            <param name="hDC">
            A handle to an existing DC. If this handle is NULL, the function creates a memory DC compatible with the application's current screen.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            <para>If the function fails, the return value is NULL.</para>
            </returns>
            <remarks>
            A memory DC exists only in memory. When the memory DC is created, its display surface is exactly one monochrome pixel wide and
            one monochrome pixel high. Before an application can use a memory DC for drawing operations, it must select a bitmap of the
            correct width and height into the DC. To select a bitmap into a DC, use the CreateCompatibleBitmap function, specifying the
            height, width, and color organization required.
            <para>
            When a memory DC is created, all attributes are set to normal default values. The memory DC can be used as a normal DC. You can
            set the attributes; obtain the current settings of its attributes; and select pens, brushes, and regions.
            </para>
            <para>
            The CreateCompatibleDC function can only be used with devices that support raster operations. An application can determine
            whether a device supports these operations by calling the GetDeviceCaps function.
            </para>
            <para>
            When you no longer need the memory DC, call the DeleteDC function. We recommend that you call DeleteDC to delete the DC. However,
            you can also call DeleteObject with the HDC to delete the DC.
            </para>
            <para>
            If hdc is NULL, the thread that calls CreateCompatibleDC owns the HDC that is created. When this thread is destroyed, the HDC is
            no longer valid. Thus, if you create the HDC and pass it to another thread, then exit the first thread, the second thread will
            not be able to use the HDC.
            </para>
            <para>
            ICM: If the DC that is passed to this function is enabled for Image Color Management (ICM), the DC created by the function is
                 ICM-enabled. The source and destination color spaces are specified in the DC.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
            <remarks>
            An application must not delete a DC whose handle was obtained by calling the GetDC function. Instead, it must call the ReleaseDC
            function to free the DC.
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated
            with the object. After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC,
            the return value is zero.
            </returns>
            <remarks>
            Do not delete a drawing object (pen or brush) while it is still selected into a DC.
            <para>When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.</para>
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.GdiFlush">
            <summary>The GdiFlush function flushes the calling thread's current batch.</summary>
            <returns>
            If all functions in the current batch succeed, the return value is nonzero.
            <para>
            If not all functions in the current batch succeed, the return value is zero, indicating that at least one function returned an error.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.GetObject(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>The GetObject function retrieves information for the specified graphics object.</summary>
            <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a
            palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function.
            </param>
            <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
            <param name="lpvObject">
            A pointer to a buffer that receives the information about the specified graphics object. If the <paramref name="lpvObject"/>
            parameter is NULL, the function return value is the number of bytes required to store the information it writes to the buffer for
            the specified graphics object.
            </param>
            <returns>
            If the function succeeds, and <paramref name="lpvObject"/> is a valid pointer, the return value is the number of bytes stored
            into the buffer.
            <para>
            If the function succeeds, and <paramref name="lpvObject"/> is NULL, the return value is the number of bytes required to hold the
            information the function would store into the buffer.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The buffer pointed to by the <paramref name="lpvObject"/> parameter must be sufficiently large to receive the information about
            the graphics object. Depending on the graphics object, the function uses a BITMAP, DIBSECTION, EXTLOGPEN, LOGBRUSH, LOGFONT, or
            LOGPEN structure, or a count of table entries (for a logical palette).
            <para>
            If <paramref name="hgdiobj"/> is a handle to a bitmap created by calling CreateDIBSection, and the specified buffer is large
            enough, the GetObject function returns a DIBSECTION structure. In addition, the bmBits member of the BITMAP structure contained
            within the DIBSECTION will contain a pointer to the bitmap's bit values.
            </para>
            <para>
            If <paramref name="hgdiobj"/> is a handle to a bitmap created by any other means, GetObject returns only the width, height, and
            color format information of the bitmap. You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function.
            </para>
            <para>
            If <paramref name="hgdiobj"/> is a handle to a logical palette, GetObject retrieves a 2-byte integer that specifies the number of
            entries in the palette. The function does not retrieve the LOGPALETTE structure defining the palette. To retrieve information
            about palette entries, an application can call the GetPaletteEntries function.
            </para>
            <para>
            If <paramref name="hgdiobj"/> is a handle to a font, the LOGFONT that is returned is the LOGFONT used to create the font. If
            Windows had to make some interpolation of the font because the precise LOGFONT could not be represented, the interpolation will
            not be reflected in the LOGFONT. For example, if you ask for a vertical version of a font that doesn't support vertical painting,
            the LOGFONT indicates the font is vertical, but Windows will paint it horizontally.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.GetObject``1(System.IntPtr)">
            <summary>The GetObject function retrieves information for the specified graphics object.</summary>
            <typeparam name="T">The output structure type.</typeparam>
            <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a
            palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function.
            </param>
            <returns>The output structure holding the information for the graphics object.</returns>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SelectObject(Vanara.Interop.NativeMethods.SafeDCHandle,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object
            of the same type.
            </summary>
            <param name="hDC">A handle to the DC.</param>
            <param name="hObject">
            A handle to the object to be selected. The specified object must have been created by using one of the following functions.
            </param>
            <returns>
            If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If
            the selected object is a region and the function succeeds, the return value is one of the following values.
            </returns>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SetBkMode(Vanara.Interop.NativeMethods.SafeDCHandle,Vanara.Interop.NativeMethods.BackgroundMode)">
            <summary>
            The SetBkMode function sets the background mix mode of the specified device context. The background mix mode is used with text,
            hatched brushes, and pen styles that are not solid lines.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="mode">The background mode.</param>
            <returns>
            If the function succeeds, the return value specifies the previous background mode. If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SetLayout(Vanara.Interop.NativeMethods.SafeDCHandle,Vanara.Interop.NativeMethods.DCLayout)">
            <summary>The SetLayout function changes the layout of a device context (DC).</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="dwLayout">The DC layout.</param>
            <returns>If the function succeeds, it returns the previous layout of the DC. If the function fails, it returns GDI_ERROR.</returns>
            <remarks>
            The layout specifies the order in which text and graphics are revealed in a window or a device context. The default is left to
            right. The SetLayout function changes this to be right to left, which is the standard in Arabic and Hebrew cultures.
            </remarks>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.TransparentBlt(Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The TransparentBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the
            specified source device context into a destination device context.
            </summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="wDest">The width, in logical units, of the destination rectangle.</param>
            <param name="hDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="xOriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="wSrc">The width, in logical units, of the source rectangle.</param>
            <param name="hSrc">The height, in logical units, of the source rectangle.</param>
            <param name="crTransparent">The RGB color in the source bitmap to treat as transparent.</param>
            <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.</returns>
            <remarks>
            The TransparentBlt function works with compatible bitmaps (DDBs).
            <para>
            The TransparentBlt function supports all formats of source bitmaps. However, for 32 bpp bitmaps, it just copies the alpha value
            over. Use AlphaBlend to specify 32 bits-per-pixel bitmaps with transparency.
            </para>
            <para>
            If the source and destination rectangles are not the same size, the source bitmap is stretched to match the destination
            rectangle. When the SetStretchBltMode function is used, the iStretchMode modes of BLACKONWHITE and WHITEONBLACK are converted to
            COLORONCOLOR for the TransparentBlt function.
            </para>
            <para>
            The destination device context specifies the transformation type for the destination coordinates. The source device context
            specifies the transformation type for the source coordinates.
            </para>
            <para>TransparentBlt does not mirror a bitmap if either the width or height, of either the source or destination, is negative.</para>
            <para>
            When used in a multiple monitor system, both hdcSrc and hdcDest must refer to the same device or the function will fail. To
            transfer data between DCs for different devices, convert the memory bitmap to a DIB by calling GetDIBits. To display the DIB to
            the second device, call SetDIBits or StretchDIBits.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.BLENDFUNCTION">
            <summary>The BLENDFUNCTION structure controls blending by specifying the blending functions for source and destination bitmaps.</summary>
            <remarks>See information on how this function determines the resulting values on <a href="https://msdn.microsoft.com/en-us/library/dd183393(v=vs.85).aspx">MSDN</a>.</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BLENDFUNCTION.BlendOp">
            <summary>
            The source blend operation. Currently, the only source and destination blend operation that has been defined is AC_SRC_OVER.
            For details, see the following Remarks section.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BLENDFUNCTION.BlendFlags">
            <summary>Must be zero.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap. The SourceConstantAlpha value is combined with
            any per-pixel alpha values in the source bitmap. If you set SourceConstantAlpha to 0, it is assumed that your image is
            transparent. Set the SourceConstantAlpha value to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted. AlphaFormat has the following value.
            <para>
            <c>AC_SRC_ALPHA</c> This flag is set when the bitmap has an Alpha channel (that is, per-pixel alpha). Note that the APIs use
            premultiplied alpha, which means that the red, green and blue channel values in the bitmap must be premultiplied with the
            alpha channel value. For example, if the alpha channel value is x, the red, green and blue channels must be multiplied by x
            and divided by 0xff prior to the call.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.BLENDFUNCTION.#ctor(System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Interop.NativeMethods.BLENDFUNCTION"/> struct and sets the alpha value.</summary>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.SafeDCHandle">
            <summary>A SafeHandle to track DC handles.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.SafeDCHandle.Null">
            <summary>A null handle.</summary>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SafeDCHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Interop.NativeMethods.SafeDCHandle"/> class.</summary>
            <param name="hDC">The handle to the DC.</param>
            <param name="ownsHandle">
            <see langword="true"/> to have the native handle released when this safe handle is disposed or finalized; <see
            langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SafeDCHandle.#ctor(System.Drawing.IDeviceContext)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Interop.NativeMethods.SafeDCHandle"/> class.</summary>
            <param name="dc">An <see cref="T:System.Drawing.IDeviceContext"/> instance.</param>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.SafeDCHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SafeDCHandle.op_Implicit(System.Drawing.Graphics)~Vanara.Interop.NativeMethods.SafeDCHandle">
            <summary>Performs an implicit conversion from <see cref="T:System.Drawing.Graphics"/> to <see cref="T:Vanara.Interop.NativeMethods.SafeDCHandle"/>.</summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.SafeDCHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeParentBackgroundFlags.WindowDC">
            <summary>If set, hdc is assumed to be a window DC, not a client DC.</summary>
            <remarks>DTPB_WINDOWDC</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeParentBackgroundFlags.UseCtlColorStaticMsg">
            <summary>
            If set, this function sends a WM_CTLCOLORSTATIC message to the parent and uses the brush if one is provided. Otherwise, it
            uses COLOR_BTNFACE.
            </summary>
            <remarks>DTPB_USECTLCOLORSTATIC</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeParentBackgroundFlags.UseEraseBkgndMsg">
            <summary>
            If set, this function returns S_OK without sending a WM_CTLCOLORSTATIC message if the parent actually painted on WM_ERASEBKGND.
            </summary>
            <remarks>DTPB_USEERASEBKGND</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.OpenThemeDataOptions.ForceRectSizing">
            <summary>Forces drawn images from this theme to stretch to fit the rectangles specified by drawing functions.</summary>
            <remarks>OTD_FORCE_RECT_SIZING</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.OpenThemeDataOptions.NonClient">
            <summary>Allows theme elements to be drawn in the non-client area of the window.</summary>
            <remarks>OTD_NONCLIENT</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.TextShadowType.None">
            <summary>No shadow will be drawn.</summary>
            <remarks>TST_NONE</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.TextShadowType.Single">
            <summary>The shadow will be drawn to appear detailed underneath text.</summary>
            <remarks>TST_SINGLE</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.TextShadowType.Continuous">
            <summary>The shadow will be drawn to appear blurred underneath text.</summary>
            <remarks>TST_CONTINUOUS</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemePropertyOrigin.State">
            <summary>Property was found in the state section.</summary>
            <remarks>PO_STATE</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemePropertyOrigin.Part">
            <summary>Property was found in the part section.</summary>
            <remarks>PO_PART</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemePropertyOrigin.Class">
            <summary>Property was found in the class section.</summary>
            <remarks>PO_CLASS</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemePropertyOrigin.Global">
            <summary>Property was found in the list of global variables.</summary>
            <remarks>PO_GLOBAL</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemePropertyOrigin.NotFound">
            <summary>Property was not found.</summary>
            <remarks>PO_NOTFOUND</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemeSize.Min">
            <summary>Receives the minimum size of a visual style part.</summary>
            <remarks>TS_MIN</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemeSize.True">
            <summary>Receives the size of the visual style part that will best fit the available space.</summary>
            <remarks>TS_TRUE</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.ThemeSize.Draw">
            <summary>Receives the size that the theme manager uses to draw a part.</summary>
            <remarks>TS_DRAW</remarks>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.WindowThemeNonClientAttributes.NoDrawCaption">
            <summary>Do Not Draw The Caption (Text)</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.WindowThemeNonClientAttributes.NoDrawIcon">
            <summary>Do Not Draw the Icon</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.WindowThemeNonClientAttributes.NoSysMenu">
            <summary>Do Not Show the System Menu</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.WindowThemeNonClientAttributes.NoMirrorHelp">
            <summary>Do Not Mirror the Question mark Symbol</summary>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.DrawThemeTextOptions">
            <summary>Defines the options for the <see cref="M:Vanara.Interop.NativeMethods.DrawThemeTextEx(Vanara.Interop.NativeMethods.SafeThemeHandle,Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.String,System.Int32,System.Windows.Forms.TextFormatFlags,Vanara.Interop.NativeMethods.RECT@,Vanara.Interop.NativeMethods.DrawThemeTextOptions@)"/> function.</summary>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.DrawThemeTextOptions.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Interop.NativeMethods.DrawThemeTextOptions"/> struct.</summary>
            <param name="init">This value must be specified to initialize.</param>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.AlternateColor">
            <summary>Gets or sets a value that specifies an alternate color property to use when drawing text.</summary>
            <value>The alternate color of the text.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.AlternateFont">
            <summary>Gets or sets an alternate font property to use when drawing text.</summary>
            <value>The alternate font.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.AntiAliasedAlpha">
            <summary>
            Gets or sets a value indicating whether to draw text with antialiased alpha. Use of this flag requires a top-down DIB
            section. This flag works only if the HDC passed to function DrawThemeTextEx has a top-down DIB section currently selected in
            it. For more information, see Device-Independent Bitmaps.
            </summary>
            <value><c>true</c> if antialiased alpha; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.ApplyOverlay">
            <summary>
            Gets or sets a value indicating whether text will be drawn on top of the shadow and outline effects ( <c>true</c>) or if just
            the shadow and outline effects will be drawn ( <c>false</c>).
            </summary>
            <value><c>true</c> if drawn on top; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.BorderColor">
            <summary>Gets or sets the color of the outline that will be drawn around the text.</summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.BorderSize">
            <summary>Gets or sets the radius of the outline that will be drawn around the text.</summary>
            <value>The size of the border.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.Callback">
            <summary>Gets or sets the callback function.</summary>
            <value>The callback function.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.GlowSize">
            <summary>Gets or sets the size of a glow that will be drawn on the background prior to any text being drawn.</summary>
            <value>The size of the glow.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.LParam">
            <summary>Gets or sets the parameter for callback back function specified by <see cref="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.Callback"/>.</summary>
            <value>The parameter.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.ReturnCalculatedRectangle">
            <summary>
            Gets or sets a value indicating whether the pRect parameter of the <see cref="M:Vanara.Interop.NativeMethods.DrawThemeTextEx(Vanara.Interop.NativeMethods.SafeThemeHandle,Vanara.Interop.NativeMethods.SafeDCHandle,System.Int32,System.Int32,System.String,System.Int32,System.Windows.Forms.TextFormatFlags,Vanara.Interop.NativeMethods.RECT@,Vanara.Interop.NativeMethods.DrawThemeTextOptions@)"/> function that uses this
            structure will be used as both an in and an out parameter. After the function returns, the pRect parameter will contain the
            rectangle that corresponds to the region calculated to be drawn.
            </summary>
            <value><c>true</c> if returning the calculated rectangle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.ShadowColor">
            <summary>Gets or sets the color of the shadow drawn behind the text.</summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.ShadowOffset">
            <summary>Gets or sets the amount of offset, in logical coordinates, between the shadow and the text.</summary>
            <value>The shadow offset.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.ShadowType">
            <summary>Gets or sets the type of the shadow that will be drawn behind the text.</summary>
            <value>The type of the shadow.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.TextColor">
            <summary>Gets or sets the color of the text that will be drawn.</summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeTextOptions.Default">
            <summary>Gets an instance with default values set.</summary>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.WTA_OPTIONS">
            <summary>The Options of What Attributes to Add/Remove</summary>
        </member>
        <member name="T:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions">
            <summary>Defines the options for the DrawThemeBackgroundEx function.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.ClipRect">
            <summary>The ClipRectangle value is defined.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.DrawSolid">
            <summary>Deprecated. Draw transparent and alpha images as solid.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.OmitBorder">
            <summary>Do not draw the border of the part (currently this value is only supported for bgtype=borderfill).</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.OmitContent">
            <summary>Do not draw the content area of the part (currently this value is only supported for bgtype=borderfill).</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.ComputingRegion">
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.HasMirroredDC">
            <summary>Assume the hdc is mirrored and flip images as appropriate (currently this value is only supported for bgtype=imagefile).</summary>
        </member>
        <member name="F:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DrawThemeBackgroundFlags.DoNotMirror">
            <summary>Do not mirror the output; even in right-to-left (RTL) layout.</summary>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.#ctor(System.Nullable{System.Drawing.Rectangle})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions"/> class.</summary>
            <param name="clipRect">The rectangle to which drawing is clipped.</param>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.ClipRectangle">
            <summary>Gets or sets the bounding rectangle of the clip region.</summary>
            <value>The clip rectangle.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.OmitBorder">
            <summary>Gets or sets a value indicating whether omit drawing the border.</summary>
            <value><c>true</c> if omit border; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.OmitContent">
            <summary>Gets or sets a value indicating whether omit drawing the content area of the part.</summary>
            <value><c>true</c> if omit content area of the part; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.HasMirroredDC">
            <summary>Gets or sets a value indicating the hdc is mirrored and flip images as appropriate.</summary>
            <value><c>true</c> if mirrored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.DoNotMirror">
            <summary>Gets or sets a value indicating whether to mirror the output; even in right-to-left (RTL) layout.</summary>
            <value><c>true</c> if not mirroring; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions.op_Implicit(System.Drawing.Rectangle)~Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions">
            <summary>Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:Vanara.Interop.NativeMethods.DrawThemeBackgroundOptions"/>.</summary>
            <param name="clipRectangle">The clipping rectangle.</param>
            <returns>The result of the conversion.</returns>
        </member>
    </members>
</doc>
